@page "/Checkout"
@using SynthMania.Models
@inject NavigationManager NavigationManager;
@inject ShoppingCartState ShoppingCartState


@if (ShoppingCartState.Count == 0)
{
    <div class="row justify-content-center">
        <div class="col-12 text-center pb-3">
            <h1>Your shopping cart is empty</h1>
        </div>
        <div class="col-12 col-md-6 col-lg-4">
            <button class="btn btn-primary w-100" @onclick="NavigateToHome">Return to home</button>
        </div>
    </div>
}
else
{
	<div class="row g-5">
		<div class="col-md-5 col-lg-4 order-md-last">
			<CartList />
		</div>
		<div class="col-md-7 col-lg-8">
			<EditForm Model="@Customer" class="@ValidationClass" OnValidSubmit=@PurchaseCompleted  OnInvalidSubmit="@InvalidSubmit" >
                <DataAnnotationsValidator/>
                <!-- Billing Address Component -->
                <BillingAddressForm Model="@Customer"/>
                
                <hr class="my-4">

				<!-- Payment Form Component -->
				<PaymentForm Model="@Customer" />

				<hr class="my-4">

				<button class="w-100 btn btn-primary btn-lg" type="submit">Complete Purchase</button>
			</EditForm>
		</div>
	</div>
}

@code{

    private string? ValidationClass { get; set; }

    private Customer Customer { get; set; } = new Customer();

    private void PurchaseCompleted()
    {
        ShoppingCartState.CompletePurchase();
        NavigateToHome();
    }
    
    private void InvalidSubmit()
    {
        ValidationClass = "was-validated";
    }

    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void OnCartChanged(object sender, CartChangedEventArgs e)
    {
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ShoppingCartState.CartChanged += OnCartChanged;
    }

}


